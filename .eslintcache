[{"C:\\Users\\CJ\\Desktop\\d3-demo\\src\\index.js":"1","C:\\Users\\CJ\\Desktop\\d3-demo\\src\\page\\netflow.js":"2","C:\\Users\\CJ\\Desktop\\d3-demo\\src\\page\\detail.js":"3","C:\\Users\\CJ\\Desktop\\d3-demo\\src\\page\\App.js":"4","C:\\Users\\CJ\\Desktop\\d3-demo\\src\\page\\utils\\tooltip.js":"5","C:\\Users\\CJ\\Desktop\\d3-demo\\src\\page\\utils\\utils.js":"6","C:\\Users\\CJ\\Desktop\\d3-demo\\src\\page\\dialog.js":"7"},{"size":180,"mtime":1606917197452,"results":"8","hashOfConfig":"9"},{"size":7511,"mtime":1607004083042,"results":"10","hashOfConfig":"9"},{"size":592,"mtime":1607003647978,"results":"11","hashOfConfig":"9"},{"size":694,"mtime":1607003464840,"results":"12","hashOfConfig":"9"},{"size":936,"mtime":1606870001919,"results":"13","hashOfConfig":"9"},{"size":284,"mtime":1606918399491,"results":"14","hashOfConfig":"9"},{"size":1611,"mtime":1607003287500,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1bnduqf",{"filePath":"19","messages":"20","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\CJ\\Desktop\\d3-demo\\src\\index.js",[],["33","34"],"C:\\Users\\CJ\\Desktop\\d3-demo\\src\\page\\netflow.js",["35","36","37","38","39","40","41","42"],"import React, { useEffect, useState, useRef } from 'react'\nimport * as d3 from 'd3'\nimport dagreD3 from 'dagre-d3'\nimport ToolTip from './utils/tooltip.js'\nimport Dialog from './dialog.js'\nimport { getNodeById, getParentIdByEdges } from './utils/utils.js'\nimport { Form, Button, Space, message, Modal, Input } from 'antd'\nimport { PlusCircleOutlined, DeleteOutlined, FormOutlined, MenuFoldOutlined } from '@ant-design/icons';\n\n\nlet data = {\n    nodes: [\n        { id: 0, label: \"节点1\", shape: \"rect\", status: 'success', desc: '节点描述' },\n        { id: 1, label: \"节点2\", shape: \"rect\", status: 'fail', desc: '节点描述' },\n        { id: 2, label: \"节点3\", shape: \"diamond\", status: 'success', desc: '节点描述' },\n        { id: 3, label: \"节点4\", shape: \"diamond\", status: 'running', desc: '节点描述' },\n        { id: 4, label: \"节点5\", shape: \"rect\", status: 'norun', desc: '节点描述' },\n        { id: 5, label: \"节点6\", shape: \"rect\", status: 'success', desc: '节点描述' }\n    ],\n    edges: [\n        { source: 0, target: 1, label: \"\" },\n        { source: 1, target: 2, label: \"\" },\n        { source: 2, target: 4, label: \"正常\" },\n        { source: 2, target: 3, label: \"不正常\" },\n        { source: 3, target: 5, label: \"不正常\" },\n        { source: 3, target: 4, label: \"正常\" }\n    ]\n}\n\nconst NetFlow = ({ onNodeClick }) => {\n    const [dataset, setDataset] = useState(data)\n    const selectNode = useRef(null)\n    const [direction, setDirection] = useState('TB')\n    const [dialogData, setDialogData] = useState({visible: false, option: 'add', data: {}})\n    let option = useRef('add')\n\n\n    useEffect(() => {\n        renderGraph()\n    }, [dataset, direction])\n\n    // 创建节点\n    const createNodes = (nodes, g) => {\n        nodes.forEach(item => {\n            item && g.setNode(item.id, {\n                label: item.label,\n                labelStyle: 'fill:#ffffff',\n                class: `node-${item.status}`,\n                shape: 'rect'\n            })\n        })\n    }\n\n    // 创建连线\n    const createEdges = (edges, g) => {\n        edges.forEach((item) => {\n            g.setEdge(item.source, item.target, {\n                label: item.label,\n                labelStyle: 'fill:#C16E12',\n                style: 'fill: #fff; stroke: #333;'\n            })\n        })\n    }\n\n\n    // 渲染画布\n    const renderGraph = () => {\n        const svgGroup = d3.select('#netContainer')\n        const innerGroup = d3.select('#gContainer')\n        const g = new dagreD3.graphlib.Graph().setGraph({ rankdir: direction })\n\n        createNodes(dataset.nodes, g)\n        createEdges(dataset.edges, g)\n        // 缩放\n        const zoom = d3.zoom().on(\"zoom\", function () {\n            innerGroup.attr('transform', d3.event.transform)\n        })\n        svgGroup.call(zoom)\n\n        const render = new dagreD3.render()\n        render(innerGroup, g)\n\n        innerGroup.selectAll('g.node')\n            .on('click', (v) => {\n                // 当前点击节点\n                const node = g.node(v)\n                const currentNode = getNodeById(dataset.nodes, v)[0]\n                d3.select('.selected-node').classed('selected-node', false)\n                d3.select(node.elem).classed('selected-node', true)\n                const tempNode = { ...currentNode }\n\n                // 获取父级元素\n                let parentNode = []\n                dataset.edges.forEach(item => {\n                    if (item.target == currentNode.id) {\n                        tempNode.source = item.source\n                        parentNode.push(...getNodeById(dataset.nodes, item.source))\n                    }\n                })\n\n                selectNode.current = tempNode\n                console.log('select', selectNode.current)\n                onNodeClick({ currentNode, parentNode })\n\n            })\n            .on(\"mouseover\", function (v) {\n                const nodeData = getNodeById(dataset.nodes, v)[0]\n                // console.log(nodeData)\n                const { label = '', desc = '',id } = nodeData\n                //tooltip显示\n                ToolTip.show(`编号：${id}<br/>名称：${label}</br>描述：${desc}`)\n            })\n            .on(\"mouseout\", function (v) {\n                //tooltip隐藏\n                ToolTip.hide()\n            })\n\n        // 居中显示\n        const initialScale = 1.5;\n        const tWidth = (svgGroup._groups[0][0].clientWidth - g.graph().width * initialScale) / 2;\n        const tHeight = (svgGroup._groups[0][0].clientHeight - g.graph().height * initialScale) / 2;\n        svgGroup.call(zoom.transform, d3.zoomIdentity.translate(tWidth, tHeight).scale(initialScale)); //元素居中\n\n    }\n    const addNode = () => {\n        showModal('add')\n    }\n    const editNode = () => {\n        if (!selectNode.current) {\n            message.warning('请选择节点')\n            return\n        }\n        showModal('edit')\n    }\n    const deleteNode = () => {\n        if (!selectNode.current) {\n            message.warning('请选择节点')\n            return\n        }\n\n        const { id, label, source } = selectNode.current\n        const { nodes, edges } = dataset\n        // 删除节点\n        for (let i = nodes.length - 1; i >= 0; i--) {\n            if (nodes[i].id === id) {\n                nodes.splice(i, 1)\n            }\n        }\n\n        // 删除连线\n        for (let i = edges.length - 1; i >= 0; i--) {\n            if (edges[i].target === id || edges[i].source === id) {\n                edges.splice(i, 1)\n            }\n        }\n        console.log('delete', dataset)\n        setDataset({ nodes, edges })\n    }\n\n    // 切换\n    const toggleDirection = () => {\n        setDirection(direction === 'LR' ? 'TB' :'LR')\n    }\n\n    const showModal = (op) => {\n        option.current = op\n        const data = op === 'edit' ? selectNode.current : {}\n        setDialogData({visible: true, option: op, data })\n    }\n\n    // 点击确定\n    const handleData = (formdata) => {\n        console.log('formdata',formdata)\n        const {id, label, source, desc} = formdata\n        let {nodes, edges} = dataset\n        if(option.current === 'edit') {\n            // 编辑\n             nodes = nodes.map(item => item.id == id? ({...item, desc, label}) : item)\n            const parentIds = getParentIdByEdges(edges, id)\n            const parentNode = nodes.filter(item => parentIds.includes(item.id))\n            onNodeClick({currentNode: getNodeById(nodes, id)[0], parentNode})\n        } else {\n            // 新增\n            nodes.push({id, label,desc, status:'norun', shape: 'rect', })\n            edges.push({target:id, source, label: ''})\n        }\n        setDataset({nodes, edges})\n    }\n\n    return (\n        <>\n            <Space>\n                <Button type=\"primary\" size=\"large\" icon={<PlusCircleOutlined />} onClick={addNode}>添加</Button>\n                <Button size=\"large\" icon={<FormOutlined />} onClick={editNode}>修改</Button>\n                <Button type=\"primary\" size=\"large\" danger=\"true\" icon={<DeleteOutlined />} onClick={deleteNode}>删除</Button>\n                <Button type=\"primary\" size=\"large\" icon={<MenuFoldOutlined />} onClick={toggleDirection}>切换</Button>\n            </Space>\n            <svg id='netContainer' width='100%' height='800'><g id=\"gContainer\"></g></svg>\n            <Dialog {...dialogData} onSendData= {handleData} onCancel = {(visible) => setDialogData({visible})}/>\n        </>\n    )\n}\n\nexport default React.memo(NetFlow)","C:\\Users\\CJ\\Desktop\\d3-demo\\src\\page\\detail.js",[],"C:\\Users\\CJ\\Desktop\\d3-demo\\src\\page\\App.js",["43"],"C:\\Users\\CJ\\Desktop\\d3-demo\\src\\page\\utils\\tooltip.js",[],"C:\\Users\\CJ\\Desktop\\d3-demo\\src\\page\\utils\\utils.js",["44","45","46"],"export function getNodeById (data, id) {\n    return data.filter(item => item.id == id)\n}\n\nexport function getParentIdByEdges(edges, id) {\n    let parentIds = []\n     edges.map(item => {\n        if(item.target == id){\n            parentIds.push(item.source)\n    }\n})\nreturn parentIds\n}","C:\\Users\\CJ\\Desktop\\d3-demo\\src\\page\\dialog.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":7,"column":10,"nodeType":"53","messageId":"54","endLine":7,"endColumn":14},{"ruleId":"51","severity":1,"message":"55","line":7,"column":40,"nodeType":"53","messageId":"54","endLine":7,"endColumn":45},{"ruleId":"51","severity":1,"message":"56","line":7,"column":47,"nodeType":"53","messageId":"54","endLine":7,"endColumn":52},{"ruleId":"57","severity":1,"message":"58","line":40,"column":8,"nodeType":"59","endLine":40,"endColumn":28,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":95,"column":37,"nodeType":"63","messageId":"64","endLine":95,"endColumn":39},{"ruleId":"51","severity":1,"message":"65","line":141,"column":21,"nodeType":"53","messageId":"54","endLine":141,"endColumn":26},{"ruleId":"51","severity":1,"message":"66","line":141,"column":28,"nodeType":"53","messageId":"54","endLine":141,"endColumn":34},{"ruleId":"61","severity":1,"message":"62","line":178,"column":48,"nodeType":"63","messageId":"64","endLine":178,"endColumn":50},{"ruleId":"51","severity":1,"message":"67","line":1,"column":26,"nodeType":"53","messageId":"54","endLine":1,"endColumn":37},{"ruleId":"61","severity":1,"message":"62","line":2,"column":40,"nodeType":"63","messageId":"64","endLine":2,"endColumn":42},{"ruleId":"68","severity":1,"message":"69","line":7,"column":21,"nodeType":"70","messageId":"71","endLine":7,"endColumn":23},{"ruleId":"61","severity":1,"message":"62","line":8,"column":24,"nodeType":"63","messageId":"64","endLine":8,"endColumn":26},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'Modal' is defined but never used.","'Input' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'renderGraph'. Either include it or remove the dependency array.","ArrayExpression",["74"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'label' is assigned a value but never used.","'source' is assigned a value but never used.","'useCallback' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},"Update the dependencies array to be: [dataset, direction, renderGraph]",{"range":"77","text":"78"},[1601,1621],"[dataset, direction, renderGraph]"]